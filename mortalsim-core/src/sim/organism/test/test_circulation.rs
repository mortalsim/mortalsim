
/*
 * THIS FILE IS AUTOMATICALLY GENERATED.
 * SOURCE: config/test/circulation.yaml
 */
use std::collections::HashSet;
use std::sync::OnceLock;
use crate::sim::layer::circulation::{BloodVesselType, BloodVessel, VesselIter};
use crate::sim::layer::AnatomicalRegionIter;
use super::TestAnatomicalRegion;

#[derive(Debug, Display, Hash, Clone, Copy, PartialEq, Eq, EnumString, IntoStaticStr)]
pub enum TestBloodVessel {
    Aorta,
    RightCarotidArtery,
    LeftCarotidArtery,
    RightAxillaryArtery,
    LeftAxillaryArtery,
    AbdominalAorta,
    RightFemoralArtery,
    LeftFemoralArtery,
    VenaCava,
    RightAxillaryVein,
    LeftAxillaryVein,
    RightJugularVein,
    LeftJugularVein,
    InferiorVenaCava,
    RightFemoralVein,
    LeftFemoralVein
}

static START_VESSELS: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static ARTERIES: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static VEINS: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static PRE_CAPILLARIES: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static POST_CAPILLARIES: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();

static AORTA_UPSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static AORTA_DOWNSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static AORTA_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static RIGHTCAROTIDARTERY_UPSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static RIGHTCAROTIDARTERY_DOWNSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static RIGHTCAROTIDARTERY_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static LEFTCAROTIDARTERY_UPSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static LEFTCAROTIDARTERY_DOWNSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static LEFTCAROTIDARTERY_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static RIGHTAXILLARYARTERY_UPSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static RIGHTAXILLARYARTERY_DOWNSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static RIGHTAXILLARYARTERY_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static LEFTAXILLARYARTERY_UPSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static LEFTAXILLARYARTERY_DOWNSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static LEFTAXILLARYARTERY_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static ABDOMINALAORTA_UPSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static ABDOMINALAORTA_DOWNSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static ABDOMINALAORTA_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static RIGHTFEMORALARTERY_UPSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static RIGHTFEMORALARTERY_DOWNSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static RIGHTFEMORALARTERY_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static LEFTFEMORALARTERY_UPSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static LEFTFEMORALARTERY_DOWNSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static LEFTFEMORALARTERY_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static VENACAVA_UPSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static VENACAVA_DOWNSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static VENACAVA_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static RIGHTAXILLARYVEIN_UPSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static RIGHTAXILLARYVEIN_DOWNSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static RIGHTAXILLARYVEIN_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static LEFTAXILLARYVEIN_UPSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static LEFTAXILLARYVEIN_DOWNSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static LEFTAXILLARYVEIN_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static RIGHTJUGULARVEIN_UPSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static RIGHTJUGULARVEIN_DOWNSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static RIGHTJUGULARVEIN_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static LEFTJUGULARVEIN_UPSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static LEFTJUGULARVEIN_DOWNSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static LEFTJUGULARVEIN_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static INFERIORVENACAVA_UPSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static INFERIORVENACAVA_DOWNSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static INFERIORVENACAVA_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static RIGHTFEMORALVEIN_UPSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static RIGHTFEMORALVEIN_DOWNSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static RIGHTFEMORALVEIN_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static LEFTFEMORALVEIN_UPSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static LEFTFEMORALVEIN_DOWNSTREAM: OnceLock<HashSet<TestBloodVessel>> = OnceLock::new();
static LEFTFEMORALVEIN_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();


impl BloodVessel for TestBloodVessel {
    type AnatomyType = TestAnatomicalRegion;

    fn start_vessels<'a>() -> VesselIter<'a, Self> {
        VesselIter(START_VESSELS.get_or_init(|| {
            let mut vessel_list = HashSet::new();
            vessel_list.insert(TestBloodVessel::Aorta);
            vessel_list
        }).iter())
    }
    fn arteries<'a>() -> VesselIter<'a, Self> {
        VesselIter(ARTERIES.get_or_init(|| {
            let mut vessel_list = HashSet::new();
            vessel_list.insert(TestBloodVessel::Aorta);
            vessel_list.insert(TestBloodVessel::RightCarotidArtery);
            vessel_list.insert(TestBloodVessel::LeftCarotidArtery);
            vessel_list.insert(TestBloodVessel::RightAxillaryArtery);
            vessel_list.insert(TestBloodVessel::LeftAxillaryArtery);
            vessel_list.insert(TestBloodVessel::AbdominalAorta);
            vessel_list.insert(TestBloodVessel::RightFemoralArtery);
            vessel_list.insert(TestBloodVessel::LeftFemoralArtery);
            vessel_list
        }).iter())
    }
    fn veins<'a>() -> VesselIter<'a, Self> {
        VesselIter(VEINS.get_or_init(|| {
            let mut vessel_list = HashSet::new();
            vessel_list.insert(TestBloodVessel::VenaCava);
            vessel_list.insert(TestBloodVessel::RightAxillaryVein);
            vessel_list.insert(TestBloodVessel::LeftAxillaryVein);
            vessel_list.insert(TestBloodVessel::RightJugularVein);
            vessel_list.insert(TestBloodVessel::LeftJugularVein);
            vessel_list.insert(TestBloodVessel::InferiorVenaCava);
            vessel_list.insert(TestBloodVessel::RightFemoralVein);
            vessel_list.insert(TestBloodVessel::LeftFemoralVein);
            vessel_list
        }).iter())
    }
    fn pre_capillaries<'a>() -> VesselIter<'a, Self> {
        VesselIter(PRE_CAPILLARIES.get_or_init(|| {
            let mut vessel_list = HashSet::new();
            vessel_list.insert(TestBloodVessel::RightJugularVein);
            vessel_list.insert(TestBloodVessel::LeftJugularVein);
            vessel_list.insert(TestBloodVessel::RightAxillaryVein);
            vessel_list.insert(TestBloodVessel::LeftAxillaryVein);
            vessel_list.insert(TestBloodVessel::RightFemoralVein);
            vessel_list.insert(TestBloodVessel::LeftFemoralVein);
            vessel_list
        }).iter())
    }
    fn post_capillaries<'a>() -> VesselIter<'a, Self> {
        VesselIter(POST_CAPILLARIES.get_or_init(|| {
            let mut vessel_list = HashSet::new();
            vessel_list.insert(TestBloodVessel::RightCarotidArtery);
            vessel_list.insert(TestBloodVessel::LeftCarotidArtery);
            vessel_list.insert(TestBloodVessel::RightAxillaryArtery);
            vessel_list.insert(TestBloodVessel::LeftAxillaryArtery);
            vessel_list.insert(TestBloodVessel::RightFemoralArtery);
            vessel_list.insert(TestBloodVessel::LeftFemoralArtery);
            vessel_list
        }).iter())
    }
    fn max_arterial_depth() -> u32 {3}
    fn max_venous_depth() -> u32 {2}
    fn max_cycle() -> u32 {5}
    fn vessel_type(&self) -> BloodVesselType {
        match self {
            TestBloodVessel::Aorta |
            TestBloodVessel::RightCarotidArtery |
            TestBloodVessel::LeftCarotidArtery |
            TestBloodVessel::RightAxillaryArtery |
            TestBloodVessel::LeftAxillaryArtery |
            TestBloodVessel::AbdominalAorta |
            TestBloodVessel::RightFemoralArtery |
            TestBloodVessel::LeftFemoralArtery => BloodVesselType::Artery,

            TestBloodVessel::VenaCava |
            TestBloodVessel::RightAxillaryVein |
            TestBloodVessel::LeftAxillaryVein |
            TestBloodVessel::RightJugularVein |
            TestBloodVessel::LeftJugularVein |
            TestBloodVessel::InferiorVenaCava |
            TestBloodVessel::RightFemoralVein |
            TestBloodVessel::LeftFemoralVein => BloodVesselType::Vein,
        }
    }
    fn upstream<'a>(&self) -> VesselIter<'a, Self> {
        match self {
            
            TestBloodVessel::Aorta => VesselIter(AORTA_UPSTREAM.get_or_init(|| {
                HashSet::new()
            }).iter()),
            TestBloodVessel::RightCarotidArtery => VesselIter(RIGHTCAROTIDARTERY_UPSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::Aorta);
                vessel_list
                
            }).iter()),
            TestBloodVessel::LeftCarotidArtery => VesselIter(LEFTCAROTIDARTERY_UPSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::Aorta);
                vessel_list
                
            }).iter()),
            TestBloodVessel::RightAxillaryArtery => VesselIter(RIGHTAXILLARYARTERY_UPSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::Aorta);
                vessel_list
                
            }).iter()),
            TestBloodVessel::LeftAxillaryArtery => VesselIter(LEFTAXILLARYARTERY_UPSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::Aorta);
                vessel_list
                
            }).iter()),
            TestBloodVessel::AbdominalAorta => VesselIter(ABDOMINALAORTA_UPSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::Aorta);
                vessel_list
                
            }).iter()),
            TestBloodVessel::RightFemoralArtery => VesselIter(RIGHTFEMORALARTERY_UPSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::AbdominalAorta);
                vessel_list
                
            }).iter()),
            TestBloodVessel::LeftFemoralArtery => VesselIter(LEFTFEMORALARTERY_UPSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::AbdominalAorta);
                vessel_list
                
            }).iter()),
            TestBloodVessel::VenaCava => VesselIter(VENACAVA_UPSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::RightAxillaryVein);
                vessel_list.insert(TestBloodVessel::LeftAxillaryVein);
                vessel_list.insert(TestBloodVessel::RightJugularVein);
                vessel_list.insert(TestBloodVessel::LeftJugularVein);
                vessel_list
                
            }).iter()),
            TestBloodVessel::RightAxillaryVein => VesselIter(RIGHTAXILLARYVEIN_UPSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::RightAxillaryArtery);
                vessel_list
                
            }).iter()),
            TestBloodVessel::LeftAxillaryVein => VesselIter(LEFTAXILLARYVEIN_UPSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::LeftAxillaryArtery);
                vessel_list
                
            }).iter()),
            TestBloodVessel::RightJugularVein => VesselIter(RIGHTJUGULARVEIN_UPSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::RightCarotidArtery);
                vessel_list
                
            }).iter()),
            TestBloodVessel::LeftJugularVein => VesselIter(LEFTJUGULARVEIN_UPSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::LeftCarotidArtery);
                vessel_list
                
            }).iter()),
            TestBloodVessel::InferiorVenaCava => VesselIter(INFERIORVENACAVA_UPSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::RightFemoralVein);
                vessel_list.insert(TestBloodVessel::LeftFemoralVein);
                vessel_list
                
            }).iter()),
            TestBloodVessel::RightFemoralVein => VesselIter(RIGHTFEMORALVEIN_UPSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::RightFemoralArtery);
                vessel_list
                
            }).iter()),
            TestBloodVessel::LeftFemoralVein => VesselIter(LEFTFEMORALVEIN_UPSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::LeftFemoralArtery);
                vessel_list
                
            }).iter())
        }
    }
    fn downstream<'a>(&self) -> VesselIter<'a, Self> {
        match self {
            
            TestBloodVessel::Aorta => VesselIter(AORTA_DOWNSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::RightCarotidArtery);
                vessel_list.insert(TestBloodVessel::LeftCarotidArtery);
                vessel_list.insert(TestBloodVessel::RightAxillaryArtery);
                vessel_list.insert(TestBloodVessel::LeftAxillaryArtery);
                vessel_list.insert(TestBloodVessel::AbdominalAorta);
                vessel_list
                
            }).iter()),
            TestBloodVessel::RightCarotidArtery => VesselIter(RIGHTCAROTIDARTERY_DOWNSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::RightJugularVein);
                vessel_list
                
            }).iter()),
            TestBloodVessel::LeftCarotidArtery => VesselIter(LEFTCAROTIDARTERY_DOWNSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::LeftJugularVein);
                vessel_list
                
            }).iter()),
            TestBloodVessel::RightAxillaryArtery => VesselIter(RIGHTAXILLARYARTERY_DOWNSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::RightAxillaryVein);
                vessel_list
                
            }).iter()),
            TestBloodVessel::LeftAxillaryArtery => VesselIter(LEFTAXILLARYARTERY_DOWNSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::LeftAxillaryVein);
                vessel_list
                
            }).iter()),
            TestBloodVessel::AbdominalAorta => VesselIter(ABDOMINALAORTA_DOWNSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::RightFemoralArtery);
                vessel_list.insert(TestBloodVessel::LeftFemoralArtery);
                vessel_list
                
            }).iter()),
            TestBloodVessel::RightFemoralArtery => VesselIter(RIGHTFEMORALARTERY_DOWNSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::RightFemoralVein);
                vessel_list
                
            }).iter()),
            TestBloodVessel::LeftFemoralArtery => VesselIter(LEFTFEMORALARTERY_DOWNSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::LeftFemoralVein);
                vessel_list
                
            }).iter()),
            TestBloodVessel::VenaCava => VesselIter(VENACAVA_DOWNSTREAM.get_or_init(|| {
                HashSet::new()
            }).iter()),
            TestBloodVessel::RightAxillaryVein => VesselIter(RIGHTAXILLARYVEIN_DOWNSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::VenaCava);
                vessel_list
                
            }).iter()),
            TestBloodVessel::LeftAxillaryVein => VesselIter(LEFTAXILLARYVEIN_DOWNSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::VenaCava);
                vessel_list
                
            }).iter()),
            TestBloodVessel::RightJugularVein => VesselIter(RIGHTJUGULARVEIN_DOWNSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::VenaCava);
                vessel_list
                
            }).iter()),
            TestBloodVessel::LeftJugularVein => VesselIter(LEFTJUGULARVEIN_DOWNSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::VenaCava);
                vessel_list
                
            }).iter()),
            TestBloodVessel::InferiorVenaCava => VesselIter(INFERIORVENACAVA_DOWNSTREAM.get_or_init(|| {
                HashSet::new()
            }).iter()),
            TestBloodVessel::RightFemoralVein => VesselIter(RIGHTFEMORALVEIN_DOWNSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::InferiorVenaCava);
                vessel_list
                
            }).iter()),
            TestBloodVessel::LeftFemoralVein => VesselIter(LEFTFEMORALVEIN_DOWNSTREAM.get_or_init(|| {
                
                let mut vessel_list = HashSet::new();
                vessel_list.insert(TestBloodVessel::InferiorVenaCava);
                vessel_list
                
            }).iter())
        }
    }
    fn regions<'a>(&self) -> AnatomicalRegionIter<Self::AnatomyType> {
        match self {
            
            TestBloodVessel::Aorta => AnatomicalRegionIter(AORTA_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Torso);
                region_list
            }).iter()),
            TestBloodVessel::RightCarotidArtery => AnatomicalRegionIter(RIGHTCAROTIDARTERY_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Torso);
                region_list.insert(TestAnatomicalRegion::Head);
                region_list
            }).iter()),
            TestBloodVessel::LeftCarotidArtery => AnatomicalRegionIter(LEFTCAROTIDARTERY_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Torso);
                region_list.insert(TestAnatomicalRegion::Head);
                region_list
            }).iter()),
            TestBloodVessel::RightAxillaryArtery => AnatomicalRegionIter(RIGHTAXILLARYARTERY_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Torso);
                region_list.insert(TestAnatomicalRegion::RightArm);
                region_list
            }).iter()),
            TestBloodVessel::LeftAxillaryArtery => AnatomicalRegionIter(LEFTAXILLARYARTERY_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Torso);
                region_list.insert(TestAnatomicalRegion::LeftArm);
                region_list
            }).iter()),
            TestBloodVessel::AbdominalAorta => AnatomicalRegionIter(ABDOMINALAORTA_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Torso);
                region_list
            }).iter()),
            TestBloodVessel::RightFemoralArtery => AnatomicalRegionIter(RIGHTFEMORALARTERY_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::RightLeg);
                region_list
            }).iter()),
            TestBloodVessel::LeftFemoralArtery => AnatomicalRegionIter(LEFTFEMORALARTERY_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::LeftLeg);
                region_list
            }).iter()),
            TestBloodVessel::VenaCava => AnatomicalRegionIter(VENACAVA_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Torso);
                region_list
            }).iter()),
            TestBloodVessel::RightAxillaryVein => AnatomicalRegionIter(RIGHTAXILLARYVEIN_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Torso);
                region_list.insert(TestAnatomicalRegion::RightArm);
                region_list
            }).iter()),
            TestBloodVessel::LeftAxillaryVein => AnatomicalRegionIter(LEFTAXILLARYVEIN_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Torso);
                region_list.insert(TestAnatomicalRegion::LeftArm);
                region_list
            }).iter()),
            TestBloodVessel::RightJugularVein => AnatomicalRegionIter(RIGHTJUGULARVEIN_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Torso);
                region_list.insert(TestAnatomicalRegion::Head);
                region_list
            }).iter()),
            TestBloodVessel::LeftJugularVein => AnatomicalRegionIter(LEFTJUGULARVEIN_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Torso);
                region_list.insert(TestAnatomicalRegion::Head);
                region_list
            }).iter()),
            TestBloodVessel::InferiorVenaCava => AnatomicalRegionIter(INFERIORVENACAVA_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Torso);
                region_list
            }).iter()),
            TestBloodVessel::RightFemoralVein => AnatomicalRegionIter(RIGHTFEMORALVEIN_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::RightLeg);
                region_list
            }).iter()),
            TestBloodVessel::LeftFemoralVein => AnatomicalRegionIter(LEFTFEMORALVEIN_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::LeftLeg);
                region_list
            }).iter())
        }
    }
}
