
/*
 * THIS FILE IS AUTOMATICALLY GENERATED.
 * SOURCE: config/test/nervous_system.yaml
 */
use std::collections::HashSet;
use std::sync::OnceLock;
use crate::sim::layer::nervous::{Nerve, NerveIter};
use crate::sim::layer::AnatomicalRegionIter;
use super::TestAnatomicalRegion;

#[derive(Debug, Display, Hash, Clone, Copy, PartialEq, Eq, EnumString, IntoStaticStr)]
pub enum TestNerve {
    Brain,
    SpinalCord,
    RightC,
    RightL,
    RightAxillary,
    RightFemoral,
    LeftC,
    LeftL,
    LeftAxillary,
    LeftFemoral,
}

static TERMINAL_NERVES: OnceLock<Vec<TestNerve>> = OnceLock::new();

static BRAIN_UPLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static BRAIN_DOWNLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static BRAIN_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static SPINALCORD_UPLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static SPINALCORD_DOWNLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static SPINALCORD_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static RIGHTC_UPLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static RIGHTC_DOWNLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static RIGHTC_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static RIGHTL_UPLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static RIGHTL_DOWNLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static RIGHTL_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static RIGHTAXILLARY_UPLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static RIGHTAXILLARY_DOWNLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static RIGHTAXILLARY_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static RIGHTFEMORAL_UPLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static RIGHTFEMORAL_DOWNLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static RIGHTFEMORAL_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static LEFTC_UPLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static LEFTC_DOWNLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static LEFTC_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static LEFTL_UPLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static LEFTL_DOWNLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static LEFTL_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static LEFTAXILLARY_UPLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static LEFTAXILLARY_DOWNLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static LEFTAXILLARY_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();

static LEFTFEMORAL_UPLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static LEFTFEMORAL_DOWNLINK: OnceLock<Vec<TestNerve>> = OnceLock::new();
static LEFTFEMORAL_REGIONS: OnceLock<HashSet<TestAnatomicalRegion>> = OnceLock::new();


impl Nerve for TestNerve {
    type AnatomyType = TestAnatomicalRegion;

    fn terminal_nerves<'a>() -> NerveIter<'a, Self> {
        NerveIter(TERMINAL_NERVES.get_or_init(|| {
            let mut nerve_list = Vec::new();
            nerve_list.push(TestNerve::RightAxillary);
               nerve_list.push(TestNerve::RightFemoral);
               nerve_list.push(TestNerve::LeftAxillary);
               nerve_list.push(TestNerve::LeftFemoral);
            nerve_list
        }).iter())
    }
    fn uplink<'a>(&self) -> NerveIter<'a, Self> {
        match self {
            
            TestNerve::Brain => NerveIter(BRAIN_UPLINK.get_or_init(|| {
                Vec::new()
            }).iter()),
            TestNerve::SpinalCord => NerveIter(SPINALCORD_UPLINK.get_or_init(|| {
                
                let mut nerve_list = Vec::new();
                nerve_list.push(TestNerve::Brain);
                nerve_list
                
            }).iter()),
            TestNerve::RightC => NerveIter(RIGHTC_UPLINK.get_or_init(|| {
                
                let mut nerve_list = Vec::new();
                nerve_list.push(TestNerve::SpinalCord);
                nerve_list
                
            }).iter()),
            TestNerve::RightL => NerveIter(RIGHTL_UPLINK.get_or_init(|| {
                
                let mut nerve_list = Vec::new();
                nerve_list.push(TestNerve::SpinalCord);
                nerve_list
                
            }).iter()),
            TestNerve::RightAxillary => NerveIter(RIGHTAXILLARY_UPLINK.get_or_init(|| {
                
                let mut nerve_list = Vec::new();
                nerve_list.push(TestNerve::RightC);
                nerve_list
                
            }).iter()),
            TestNerve::RightFemoral => NerveIter(RIGHTFEMORAL_UPLINK.get_or_init(|| {
                
                let mut nerve_list = Vec::new();
                nerve_list.push(TestNerve::RightL);
                nerve_list
                
            }).iter()),
            TestNerve::LeftC => NerveIter(LEFTC_UPLINK.get_or_init(|| {
                
                let mut nerve_list = Vec::new();
                nerve_list.push(TestNerve::SpinalCord);
                nerve_list
                
            }).iter()),
            TestNerve::LeftL => NerveIter(LEFTL_UPLINK.get_or_init(|| {
                
                let mut nerve_list = Vec::new();
                nerve_list.push(TestNerve::SpinalCord);
                nerve_list
                
            }).iter()),
            TestNerve::LeftAxillary => NerveIter(LEFTAXILLARY_UPLINK.get_or_init(|| {
                
                let mut nerve_list = Vec::new();
                nerve_list.push(TestNerve::LeftC);
                nerve_list
                
            }).iter()),
            TestNerve::LeftFemoral => NerveIter(LEFTFEMORAL_UPLINK.get_or_init(|| {
                
                let mut nerve_list = Vec::new();
                nerve_list.push(TestNerve::LeftL);
                nerve_list
                
            }).iter())
        }
    }
    fn downlink<'a>(&self) -> NerveIter<'a, Self> {
        match self {
            
            TestNerve::Brain => NerveIter(BRAIN_DOWNLINK.get_or_init(|| {
                
                let mut nerve_list = Vec::new();
                nerve_list.push(TestNerve::SpinalCord);
                nerve_list
                
            }).iter()),
            TestNerve::SpinalCord => NerveIter(SPINALCORD_DOWNLINK.get_or_init(|| {
                
                let mut nerve_list = Vec::new();
                nerve_list.push(TestNerve::RightC);
                nerve_list.push(TestNerve::LeftC);
                nerve_list.push(TestNerve::RightL);
                nerve_list.push(TestNerve::LeftL);
                nerve_list
                
            }).iter()),
            TestNerve::RightC => NerveIter(RIGHTC_DOWNLINK.get_or_init(|| {
                
                let mut nerve_list = Vec::new();
                nerve_list.push(TestNerve::RightAxillary);
                nerve_list
                
            }).iter()),
            TestNerve::RightL => NerveIter(RIGHTL_DOWNLINK.get_or_init(|| {
                
                let mut nerve_list = Vec::new();
                nerve_list.push(TestNerve::RightFemoral);
                nerve_list
                
            }).iter()),
            TestNerve::RightAxillary => NerveIter(RIGHTAXILLARY_DOWNLINK.get_or_init(|| {
                Vec::new()
            }).iter()),
            TestNerve::RightFemoral => NerveIter(RIGHTFEMORAL_DOWNLINK.get_or_init(|| {
                Vec::new()
            }).iter()),
            TestNerve::LeftC => NerveIter(LEFTC_DOWNLINK.get_or_init(|| {
                
                let mut nerve_list = Vec::new();
                nerve_list.push(TestNerve::LeftAxillary);
                nerve_list
                
            }).iter()),
            TestNerve::LeftL => NerveIter(LEFTL_DOWNLINK.get_or_init(|| {
                
                let mut nerve_list = Vec::new();
                nerve_list.push(TestNerve::LeftFemoral);
                nerve_list
                
            }).iter()),
            TestNerve::LeftAxillary => NerveIter(LEFTAXILLARY_DOWNLINK.get_or_init(|| {
                Vec::new()
            }).iter()),
            TestNerve::LeftFemoral => NerveIter(LEFTFEMORAL_DOWNLINK.get_or_init(|| {
                Vec::new()
            }).iter())
        }
    }
    fn regions<'a>(&self) -> AnatomicalRegionIter<Self::AnatomyType> {
        match self {
            
            TestNerve::Brain => AnatomicalRegionIter(BRAIN_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Head);
                region_list
            }).iter()),
            TestNerve::SpinalCord => AnatomicalRegionIter(SPINALCORD_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Head);
                region_list.insert(TestAnatomicalRegion::Torso);
                region_list
            }).iter()),
            TestNerve::RightC => AnatomicalRegionIter(RIGHTC_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Torso);
                region_list
            }).iter()),
            TestNerve::RightL => AnatomicalRegionIter(RIGHTL_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Torso);
                region_list
            }).iter()),
            TestNerve::RightAxillary => AnatomicalRegionIter(RIGHTAXILLARY_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::RightArm);
                region_list
            }).iter()),
            TestNerve::RightFemoral => AnatomicalRegionIter(RIGHTFEMORAL_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::RightLeg);
                region_list
            }).iter()),
            TestNerve::LeftC => AnatomicalRegionIter(LEFTC_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Torso);
                region_list
            }).iter()),
            TestNerve::LeftL => AnatomicalRegionIter(LEFTL_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::Torso);
                region_list
            }).iter()),
            TestNerve::LeftAxillary => AnatomicalRegionIter(LEFTAXILLARY_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::LeftArm);
                region_list
            }).iter()),
            TestNerve::LeftFemoral => AnatomicalRegionIter(LEFTFEMORAL_REGIONS.get_or_init(|| {
                let mut region_list = HashSet::new();
                region_list.insert(TestAnatomicalRegion::LeftLeg);
                region_list
            }).iter())
        }
    }
}
    